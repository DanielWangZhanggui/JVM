Oracle JVM memory management
----------------------------
The Sun JVM is generational, meaning that objects are created in one space and given several chances to die before they are tenured into a long-term space. Specifically, the Sun JVM is broken into the following spaces: 

* Young generation, including Eden and two survivor spaces (the From space and the To space)
* Old generation
* Permanent generation

Figure 1 illustrates the breakdown of the Sun heap's generations and spaces

image::img/jvm-memory-management-1.png[illustrates the breakdown of the Sun heap's generations and spaces]

Objects are created in Eden. When Eden is full, the garbage collector iterates over all objects in Eden, copies live objects to the first survivor space, and frees memory for any dead objects. When Eden again becomes full, it repeats the process by copying live objects from Eden to the second survivor space, and then copying live objects from the first survivor space to the second survivor space.If the second survivor space fills and live objects remain in Eden or in the first survivor space, then these objects are tenured (that is, they are copied to the old generation).

Figure 2. Objects are created in Eden until it is full

image::img/jvm-memory-management-2.png[Objects are created in Eden until it is full]

Figure 3. The order of processing is important: The garbage collector first traverses Eden and then the survivor space; this ensures that objects are given ample opportunity to die before being tenured

image::img/jvm-memory-management-3.png[The order of processing is important: The garbage collector first traverses Eden and then the survivor space; this ensures that objects are given ample opportunity to die before being tenured]

When the garbage collector cannot reclaim enough memory by executing this type of minor collection, also known as a copy collection, then it performs a major collection, also known as a stop-the-world collection. During the stop-the-world collection, the garbage collector suspends all threads and performs a mark-and-sweep collection on the entire heap, leaving the entire young generation empty and ready to restart this process. 

Figure 4. When the garbage collector frees all dead objects and moves all live objects to a newly compacted tenured space, it leaves Eden and both survivor spaces empty

image::img/jvm-memory-management-4.png[When the garbage collector frees all dead objects and moves all live objects to a newly compacted tenured space, it leaves Eden and both survivor spaces empty]

From Sun's implementation of garbage collection, you can see that objects in the old generation can be collected only by a major collection. Long-lived objects are expensive to clean up, so you want to ensure that short-lived objects die in a timely manner before they have a chance to be tenured, and hence require a major garbage collection to reclaim their memory. 

All of this background prepares us to identify memory leaks. Memory is leaked in Java when an object maintains an unwanted reference to another object, hence stopping the garbage collector from reclaiming its memory. In light of the architecture of the Sun JVM, objects that are not dereferenced will make their way through Eden and the survivor spaces into the old generation. Furthermore, in a multiuser Web-based environment, if multiple requests are being made to leaky code, we will see a pattern of growth in the old generation. 

Figure 5 highlights potential candidates for leaked objects: objects that survive multiple major collections in the tenured space. Not all objects in the tenured space represent memory leaks, but all leaked objects will eventually end up in the tenured space. If a true memory leak exists, the tenured space will begin filling up with leaked objects until it runs out of memory. 

Therefore, we want to track the effectiveness of garbage collection in the old generation: each time that a major garbage collection runs, how much memory is it able to reclaim? Is the memory use in the old generation growing according to any discernable pattern? 

Figure 5. The shaded objects are those that have survived multiple major collections and are potential memory leaks

image::img/jvm-memory-management-5.png[The shaded objects are those that have survived multiple major collections and are potential memory leaks]

JVM OPTS & Commands
-------------------

Enable GC log
+++++++++++++

----
-verbose:gc -Xloggc:gc.log
-verbose:gc -Xloggc:gc.log -XX:+PrintGCDetails
-verbose:gc -Xloggc:gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps
----

link:gc-log-demo.asciidoc[GC Log Demo]

link:gc.asciidoc[What's GC]

Enable heap dump
++++++++++++++++

----
-XX:+HeapDumpOnOutOfMemoryError
----

Heap Reference
++++++++++++++

* initial java heap size
----
-Xms
----

* maximum java heap size
----
-Xmx
----

* the size of the heap for the young generation
----
-Xmn
----

Perm Reference
++++++++++++++


Enable jconsole
+++++++++++++++

* jconsole monitor j2se app
----
-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
----

* jconsole monitor JBoss 6 and previous version JBoss
----
-Djboss.platform.mbeanserver
----

Use jmap
++++++++

* print java heap summary
----
jmap -heap <PID>
----

link:heap-summary-demo[Heap Summary Demo]

* generate heap dump(Linux 32)
----
jmap -dump:format=b,file=heap.hprof JAVA_PID
----

* generate heap dump(Linux 64)
----
jmap -J-d64 -dump:format=b,file=heap.hprof JAVA_PID
----

* generate heap dump(Windows)
----
jmap -dump:format=b,file=heap.hprof JAVA_PID
----





Useful Link
-----------

* JVM OPT: http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html
* Solving common Java EE performance problems: http://www.javaworld.com/javaworld/jw-06-2006/jw-0619-tuning.html
* JavaÂ® Virtual Machine Specification: http://docs.oracle.com/javase/specs/jvms/se7/html/




