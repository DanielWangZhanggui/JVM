Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin Hi

I have done some investigation and got the following founding.

This not JBoss Bug, the issue cause due to terracotta-toolkit-1.4-runtime-4.0.0.jar(com.terracotta.express.ClientFactoryImpl) implementation didn't really clear about JBoss VFS mechanism.

VFS is a Virtual File System used while JBoss load class. If deploy a zipped war, each jar contained in war will give a virtual path, for example, terracotta-toolkit-1.4-runtime-4.0.0.jar exist in TestEhcache.war/WEB-INF/lib, this jar will give a virtual path:
vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
Even /content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar did not really exist, but VFS can find terracotta-toolkit-1.4-runtime-4.0.0.jar, VFS implement the java.net.URL, we can use interface java.net.URL get the terracotta-toolkit-1.4-runtime-4.0.0.jar as file or stream.

But terracotta-toolkit-1.4-runtime-4.0.0.jar's implementation do the following, I will list the procedure with source code in com.terracotta.express.ClientFactoryImpl
  1. get  VFS URL  (the path vfs:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar)
          URL source = getClass().getProtectionDomain().getCodeSource().getLocation();
  2. convert VFS URL to traditional URL(the path will be file:/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), they created a new URL.
          source = Util.fixUpUrl(source);
  3. use traditional URL open stream(this throw FileNotFoundException, because '/content/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar', is a virtual path, didn't real exist).
         standaloneJar = new ZipInputStream(source.openStream());
if terracotta do not do step 2, use VFS URL directly, they will avoid FileNotFoundException, and everything works fine.

Why deploy as unzipped war can success?
   If deploy a folder, VFS will use absolute path, for example, if will deploy terracotta-toolkit-1.4-runtime-4.0.0.jar in unzipped war, VFS will give path like:
vfs:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar
  So even terracotta covert VFS URL to traditional URL(file:jboss-eap-6.0/standalone/deployments/TestEhcache.war/WEB-INF/lib/terracotta-toolkit-1.4-runtime-4.0.0.jar), traditional URL also can open stream.

On the other side, I write a more simple reproduce project, deploy attachment vfs.war to EAP 6, click http://localhost:8080/vfs-test/helloWorld to invoke reproduce app, JBoss console will throw FileNotFoundException exception.

MY Advice:
1. upgrade terracotta-toolkit-1.4-runtime-4.0.0.jar to high version
    I viewed the decompile code and found terracotta-toolkit-1.4-runtime-4.0.0.jar base on jboss as 6, probably high version terracotta-toolkit-1.4-runtime-4.0.0.jar will base on jboss as 7(jboss eap 6 use jboss as 7 as a component).
---
String extForm = source.toExternalForm();

    if ((extForm.startsWith("vfs")) && (jboss6x)) {
      URLConnection conn = source.openConnection();
      Object content = conn.getContent();
      try {
        Class vfsUtilsClass = Class.forName("org.jboss.vfs.VFSUtils");
---
2. Let customer know this is not JBoss issue, because terracotta-toolkit-1.4-runtime-4.0.0.jar is not our projects.

Can we update above conclusion to customer? any confuse or question please feel free ask me.

Cheers
Kylin 
